<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <!-- 加载资源配置文件 -->
    <bean id="propertyConfigurerBusiDb"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:galaxy.db.properties</value>
            </list>
        </property>
    </bean>
    <!-- 配置数据源 -->
    <bean id="shardManager" class="com.dcits.galaxy.dal.mybatis.shard.ShardManager">
        <property name="shards">
            <set>
                <ref bean="shardUpright"></ref>
                <ref bean="shardLevel1"></ref>
                <ref bean="shardLevel2"></ref>
            </set>
        </property>
        <property name="defaultShard" ref="shardUpright"/>
    </bean>
    <bean id="shardManagerLi" class="com.dcits.galaxy.dal.mybatis.shard.ShardManager">
        <property name="shards">
            <set>
                <ref bean="shardUpright"></ref>
                <ref bean="shardLevel1"></ref>
                <ref bean="shardLevel2"></ref>
            </set>
        </property>
        <property name="defaultShard" ref="shardUpright"/>
    </bean>

    <bean id="shardUpright" class="com.dcits.galaxy.dal.mybatis.shard.Shard">
        <property name="id" value="partition0"/>
        <property name="dataSource" ref="dataSource0"/>
    </bean>
    <bean id="shardLevel1" class="com.dcits.galaxy.dal.mybatis.shard.Shard">
        <property name="id" value="partition1"/>
        <property name="dataSource" ref="dataSource1"/>
    </bean>
    <bean id="shardLevel2" class="com.dcits.galaxy.dal.mybatis.shard.Shard">
        <property name="id" value="partition2"/>
        <property name="dataSource" ref="dataSource2"/>
    </bean>
    <!-- 垂直数据库数据源 -->
    <bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${db0.jdbcUrl}"/>
        <property name="username" value="${db0.username}"/>
        <property name="password" value="${db0.password}"/>
        <property name="initialSize" value="${db.pool.initialSize}"/>
        <property name="maxActive" value="${db.pool.maxActive}"/>
        <property name="minIdle" value="${db.pool.minIdle}"/>
        <property name="poolPreparedStatements" value="${db.pool.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${db.pool.maxOpenPreparedStatements}"/>
        <property name="validationQuery" value="${db.pool.validationQuery}"/>
        <property name="testOnBorrow" value="${db.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.pool.testOnReturn}"/>
        <property name="testWhileIdle" value="${db.pool.testWhileIdle}"/>
        <property name="filters" value="${db.pool.filters}"/>
        <property name="connectionProperties" value="config.decrypt=false"/>
    </bean>
    <!-- 水平数据源1 -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${db1.jdbcUrl}"/>
        <property name="username" value="${db1.username}"/>
        <property name="password" value="${db1.password}"/>
        <property name="initialSize" value="${db.pool.initialSize}"/>
        <property name="maxActive" value="${db.pool.maxActive}"/>
        <property name="maxWait" value="1000"/>
        <property name="minIdle" value="${db.pool.minIdle}"/>
        <property name="poolPreparedStatements" value="${db.pool.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${db.pool.maxOpenPreparedStatements}"/>
        <property name="validationQuery" value="${db.pool.validationQuery}"/>
        <property name="testOnBorrow" value="${db.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.pool.testOnReturn}"/>
        <property name="testWhileIdle" value="${db.pool.testWhileIdle}"/>
        <property name="filters" value="${db.pool.filters}"/>
        <property name="connectionProperties" value="config.decrypt=false"/>
    </bean>
    <!-- 水平数据源1 -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${db2.jdbcUrl}"/>
        <property name="username" value="${db2.username}"/>
        <property name="password" value="${db2.password}"/>
        <property name="initialSize" value="${db.pool.initialSize}"/>
        <property name="maxActive" value="${db.pool.maxActive}"/>
        <property name="maxWait" value="1000"/>
        <property name="minIdle" value="${db.pool.minIdle}"/>
        <property name="poolPreparedStatements" value="${db.pool.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${db.pool.maxOpenPreparedStatements}"/>
        <property name="validationQuery" value="${db.pool.validationQuery}"/>
        <property name="testOnBorrow" value="${db.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.pool.testOnReturn}"/>
        <property name="testWhileIdle" value="${db.pool.testWhileIdle}"/>
        <property name="filters" value="${db.pool.filters}"/>
        <property name="connectionProperties" value="config.decrypt=false"/>
    </bean>

    <!-- TELLER数据库数据源 -->
    <bean id="shardManagerTeller" class="com.dcits.galaxy.dal.mybatis.shard.ShardManager">
        <property name="shards">
            <set>
                <ref bean="shardTeller"></ref>
            </set>
        </property>
        <property name="defaultShard" ref="shardTeller"/>
    </bean>
    <bean id="shardTeller" class="com.dcits.galaxy.dal.mybatis.shard.Shard">
        <property name="id" value="partition0"/>
        <property name="dataSource" ref="dataSourceTeller"/>
    </bean>
    <bean id="dataSourceTeller" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${dbTeller.jdbcUrl}"/>
        <property name="username" value="${dbTeller.username}"/>
        <property name="password" value="${dbTeller.password}"/>
        <property name="initialSize" value="${db.pool.initialSize}"/>
        <property name="maxActive" value="${db.pool.maxActive}"/>
        <property name="minIdle" value="${db.pool.minIdle}"/>
        <property name="poolPreparedStatements" value="${db.pool.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${db.pool.maxOpenPreparedStatements}"/>
        <property name="validationQuery" value="${db.pool.validationQuery}"/>
        <property name="testOnBorrow" value="${db.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.pool.testOnReturn}"/>
        <property name="testWhileIdle" value="${db.pool.testWhileIdle}"/>
        <property name="filters" value="${db.pool.filters}"/>
        <property name="connectionProperties" value="config.decrypt=false"/>
    </bean>

    <!-- 路由函数配置 -->
    <bean id="hashFunction" class="com.dcits.galaxy.dal.route.HashFunction"></bean>
	<!--路由函数配置_与数据库交互-->
	<!--利率市场化路由函数配置_与数据库交互-->
    <!-- 按月份路由 -->
    <bean id="monthRouter" class="com.dcits.galaxy.dal.route.HashFunction"></bean>
    <!-- 按时间段路由 -->
    <bean id="timeRouter" class="com.dcits.galaxy.dal.route.HashFunction">
        <!-- <property name="pattern" value="yyyy-MM-dd HH:mm:ss" /> -->
    </bean>

    <!-- 配置路由规则开始 -->
    <bean id="internalRouter"
          class="com.dcits.galaxy.dal.mybatis.router.adapter.config.AdapterRouterXmlFactoryBean">
        <!-- functionsMap是在使用自定义路由规则函数的时候使用 -->
        <property name="functionsMap">
            <map>
				<entry key="router" value-ref="hashFunction"></entry>
            </map>
        </property>
        <property name="configLocations" value="classpath*:dbRule/*.xml"/>
        <!-- 不想使用jar的情况，可以修改这个地方配置到集中部署路径 -->
        <property name="shardManager" ref="shardManager"/>
    </bean>
    <!-- 配置路由规则结束 -->

    <!-- ============================== 查询处理 start ============================== -->
    <bean id="mergeRulesFactory"
          class="com.dcits.galaxy.dal.mybatis.merger.config.MergeRulesFactoryBean">
        <property name="locations" value="classpath*:META-INF/merge-rules/**/*.xml"/>
    </bean>
    <!-- ============================== 查询处理 end ============================== -->

    <!-- 集成mybatis，统一在此加载，对业务开发而言约定：其配置文件在各个jar包中的/META-INF/mapper/**/*.xml -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource0"/>
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
        <property name="transactionFactory" ref="transactionFactory"/>
        <property name="configLocation"
                  value="classpath:META-INF/mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:META-INF/mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="${typeAliasesPackage}"/>
    </bean>

    <!-- 配置ShardSqlSessionTemplate；分区表操作必须使用此对象-->
    <bean id="shardSqlSessionTemplate" class="com.dcits.galaxy.dal.mybatis.ShardSqlSessionTemplate"
          init-method="init">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <property name="shardManager" ref="shardManager"/>
        <property name="router" ref="internalRouter"/>
        <property name="mergeExecutor" ref="mergeExecutor"/>
        <property name="proactorExecutor" ref="proactorExecutor"/>
        <property name="idempotentUtil" ref="idempotentUtil"/>
        <property name="defaultShardPolicy" value="route_noshard_error"/>
    </bean>

    <!-- 配置路由规则开始 -->
    <bean id="internalRouterLi"
          class="com.dcits.galaxy.dal.mybatis.router.adapter.config.AdapterRouterXmlFactoryBean">
        <!-- functionsMap是在使用自定义路由规则函数的时候使用 -->
        <property name="functionsMap">
            <map>
                <entry key="router" value-ref="hashFunction"></entry>
            </map>
        </property>
        <property name="configLocations" value="classpath*:dbRule/*.xml"/>
        <!-- 不想使用jar的情况，可以修改这个地方配置到集中部署路径 -->
        <property name="shardManager" ref="shardManager"/>
    </bean>
    <bean id="sqlSessionFactoryLi" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1"/>
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
        <property name="transactionFactory" ref="transactionFactory"/>
        <property name="configLocation" value="classpath:META-INF/mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:META-INF/mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="${typeAliasesPackage}"/>
    </bean>

    <!-- 配置ShardSqlSessionTemplate；分区表操作必须使用此对象-->
    <bean id="shardSqlSessionTemplateLi" class="com.dcits.galaxy.dal.mybatis.ShardSqlSessionTemplate"
          init-method="init">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <property name="shardManager" ref="shardManagerLi"/>
        <property name="router" ref="internalRouterLi"/>
        <property name="mergeExecutor" ref="mergeExecutor"/>
        <property name="proactorExecutor" ref="proactorExecutor"/>
        <property name="idempotentUtil" ref="idempotentUtil"/>
    </bean>

    <!-- TELLER配置路由规则开始 -->

    <bean id="internalRouterTeller" class="com.dcits.galaxy.dal.mybatis.router.config.SimpleRouterXmlFactoryBean">
        <!-- functionsMap是在使用自定义路由规则函数的时候使用 -->
        <property name="functionsMap">
            <map>
                <entry key="hash" value-ref="hashFunction"></entry>
            </map>
        </property>
        <property name="configLocations" value="classpath*:META-INF/routing-rules/**/*.xml"/>
        <property name="shardManager" ref="shardManagerTeller"/>
    </bean>
    <bean id="sqlSessionFactoryTeller" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceTeller"/>
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
        <property name="transactionFactory" ref="transactionFactory"/>
        <property name="configLocation" value="classpath:META-INF/mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:META-INF/mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="${typeAliasesPackage}"/>
    </bean>

    <!-- 配置ShardSqlSessionTemplate；分区表操作必须使用此对象-->
    <bean id="shardSqlSessionTemplateTeller" class="com.dcits.galaxy.dal.mybatis.ShardSqlSessionTemplate"
          init-method="init">
        <property name="sqlSessionFactory" ref="sqlSessionFactoryTeller"/>
        <property name="shardManager" ref="shardManagerTeller"/>
        <property name="router" ref="internalRouterTeller"/>
        <property name="mergeExecutor" ref="mergeExecutor"/>
        <property name="proactorExecutor" ref="proactorExecutor"/>
        <property name="idempotentUtil" ref="idempotentUtil"/>
    </bean>
</beans>